import 'dart:convert';import 'package:flutter/foundation.dart' show debugPrint;import 'package:signals/signals_flutter.dart';import '../cache/service/local_service.dart';abstract class PersistedSignal<T> extends FlutterSignal<T> with PersistedSignalMixin<T> {  PersistedSignal(    super.internalValue, {    super.autoDispose,    super.debugLabel,    required this.key,    required this.store,  });  @override  final String key;  @override  final LocalService store;}mixin PersistedSignalMixin<T> on Signal<T> {  String get key;  LocalService get store;  bool loaded = false;  Future<void> init() async {    try {      final val = await load();      super.value = val;      loaded = true;    } catch (e) {      debugPrint('Error loading persisted signal: $e');      loaded = true;    }  }  @override  T get value {    if (!loaded) {      init();      return super.value;    }    return super.value;  }  @override  set value(T value) {    if (super.value != value) {      super.value = value;      save(value).ignore();    }  }  Future<T> load() async {    final val = await store.getData(key: key);    if (val == null || val is! String) return value;    return decode(val);  }  Future<void> save(T value) async {    final str = encode(value);    store.setData(key: key, data: str);  }  T decode(String value) => jsonDecode(value);  String encode(T value) => jsonEncode(value);}