import 'package:flutter/material.dart';import 'package:smart_rob/core/cache/service/local_service.dart';import 'package:smart_rob/core/core.dart';import '../mixins/persisted_signal_mixin.dart';class AppTheme {  final LocalService localService;  ThemeSignal? currentTheme;  AppTheme(this.localService) {    currentTheme = ThemeSignal(Themes.theme, 'theme', localService);    _initTheme();  }  Future<void> _initTheme() async {    await currentTheme!.init();    final savedTheme = currentTheme!.value;    AppColors.isDarkMode = savedTheme.brightness == Brightness.dark;  }}class ThemeSignal extends PersistedSignal<ThemeData> {  ThemeSignal(super.val, String key, LocalService localService)    : super(key: key, store: localService);  bool get isLightTheme => value.brightness == Brightness.light;  static final ThemeData _lightTheme = Themes.theme;  static final ThemeData _darkTheme = Themes.darkTheme;  void toggleTheme() async {    final newTheme = value.brightness == _lightTheme.brightness ? _darkTheme : _lightTheme;    AppColors.isDarkMode = newTheme.brightness == _darkTheme.brightness;    value = newTheme;  }  @override  String encode(ThemeData value) => value.brightness == Brightness.light ? 'light' : 'dark';  @override  ThemeData decode(String value) {    return value == 'light' ? _lightTheme : _darkTheme;  }}