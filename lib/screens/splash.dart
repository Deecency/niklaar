import 'package:flutter/material.dart';import 'package:flutter/rendering.dart';import 'package:flutter_svg/flutter_svg.dart';import 'package:signals/signals_flutter.dart';import 'package:smart_rob/core/extensions/context_ext.dart';import '../app.dart';import '../core/core.dart';import '../widgets/page_wrapper.dart';final splash = signal<SplashState>(SplashState.initial);enum SplashState { initial, showing, dismissed }class SplashView extends StatefulWidget {  const SplashView({required this.removeSplashLoader, super.key});  final bool removeSplashLoader;  @override  State<SplashView> createState() => _SplashViewState();}class _SplashViewState extends State<SplashView> with TickerProviderStateMixin {  late Stopwatch stopwatch;  late AnimationController _controller;  late Animation<double> _animation;  @override  void dispose() {    _controller.dispose();    stopwatch.stop();    super.dispose();  }  @override  void initState() {    stopwatch = Stopwatch()..start();    _controller = AnimationController(duration: const Duration(seconds: 2), vsync: this)      ..repeat(reverse: true);    _animation = CurvedAnimation(parent: _controller, curve: Curves.easeInOut);    splash.addListener(() {      if (splash.value == SplashState.dismissed) {        _controller          ..animateTo(1, curve: Curves.easeInOut)          ..stop();        context.pushReplacement(const Niklaar());      }    });    _showSplash();    _isFirstLaunch();    super.initState();    if (widget.removeSplashLoader) {      RendererBinding.instance.deferFirstFrame();    }  }  Future<void> _showSplash() async {    splash.value = SplashState.showing;    await Future.delayed(Duration(seconds: 3));    splash.value = SplashState.dismissed;  }  Future<void> _isFirstLaunch() async {    /*isFirstLaunch = await context.read<LocalRepository>().isFirstLaunch();    if (isFirstLaunch && mounted) {      await context.read<SecureStorage>().clearStorage();    }*/  }  @override  void didChangeDependencies() {    if (widget.removeSplashLoader) {      if (splash.value == SplashState.dismissed) {        RendererBinding.instance.allowFirstFrame();      }    }    super.didChangeDependencies();  }  @override  Widget build(BuildContext context) {    SizeConfig.init(context);    return PageWrapper(      backgroundColor: AppColors.white,      child: Center(        child: Padding(          padding: const EdgeInsets.symmetric(horizontal: 40),          child: Column(            children: <Widget>[              const Spacer(),              ScaleTransition(                scale: _animation,                child: SvgPicture.asset('assets/logos/logo_big.svg', height: 49),              ),              const Spacer(),            ],          ),        ),      ),    );  }}